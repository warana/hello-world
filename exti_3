주기적으로 스위치를 읽어 보다가 같은 값이 유지가 되면 그것을 현재의 상태로 인식하는 겁니다.

예를 들어 10mS마다 핀 값을 읽어서 여러 번 High가 읽어지고 나면 High라고 인식합니다.

또 반대로 여러번 Low라고 읽어지면 Low라고 인식합니다.

 

저는 주로 10mS마다 스위치를 읽어요. 그리고 두 번 반복해서 같은 값이 읽어지면 그 값을 사용하지요.


#define MAX_KEY 4
 
struct keystruct
{
    unsigned char Status;
    unsigned char Value;
    unsigned short Data;
    unsigned short OldData;
    unsigned char AutoKey;
};
 
void ChkKey(void)
{ // 10mS마다 한번씩 호출됨.
    uint8_t cnt = 0;
    uint16_t tmp = 0;
 
    KeyFlags.Data = ReadKey(); // 현재의 스위치 비트를 읽어옴
    if (KeyFlags.Status == 1) // 키가 눌렸고 처리되지 않았으면 추가 작업 없음.
        goto CHK_END;
 
    if (KeyFlags.Data == KeyFlags.OldData)
    { // 같은 값이 연속해서 두번 들어왔음. 채터링 노이즈를 제거한 상태
        if (bit_test(KeyFlags.Data, KeyFlags.AutoKey))
        { // 키가 눌린 상태로 계속 유지됨.
            AutoKeyCnt++;
            if (AutoKeyCnt == 50)
            { // 첫번째 길게 눌림 키를 처리
                KeyFlags.Value += 50;
                KeyFlags.Status = 1;
            }
            else if (AutoKeyCnt > 100)
            { // 2번째 이후 길게 눌림 키를 처리
                KeyFlags.Status = 1;
                AutoKeyCnt = 100 - 5; // 0.5sec
            }
        }
        else
        { // 모든 키가 떨어진 상태
            KeyFlags.AutoKey = MAX_KEY; // no key
        }
    }
    else
    { // 키가 눌리거나 떨어지면서 변화가 생김.
        AutoKeyCnt = 0;
        tmp = KeyFlags.OldData ^ KeyFlags.Data;
        for (cnt = 0; cnt < 16; cnt++)
        {
            if (!bit_test(KeyFlags.OldData, cnt))
            { // 변화가 생긴 핀이 떨어졌다가 눌린것인지 판단
                if (bit_test(tmp, cnt))
                    break;
            }
        }
        KeyFlags.Value = cnt;
        if (cnt < MAX_KEY)
        { // 정상적으로 키가 눌려짐.
            KeyFlags.Status = 1; // 눌림 상태로 전환
            KeyFlags.AutoKey = cnt;
            AutoKeyCnt = 0;
            // Key Story 눌린 키를 누적하여 비교
            // SaveKeyBuffer(KeyFlags.Value);
            // bit_set(KeyFirstFlags, cnt);
            // bit_set(KeyFirstFlags2, cnt);
        }
    }
 
CHK_END:
    KeyFlags.OldData = KeyFlags.Data;
}
 
//=============================================================================
uint16_t ReadKey(void)
{
    uint16_t nRet = 0;
    static bool AdjKeyReleaseFlag = false;
    static int AdjKeyPushCnt = 0;
    
    if (digitalRead(KEY_HOUR) == LOW)
    {
        nRet |= 0x0001;
    }
    if (digitalRead(KEY_MIN) == LOW)
    {
        nRet |= 0x0002;
    }
    if (digitalRead(KEY_ALARM) == LOW)
    {
        nRet |= 0x0004;
    }
    if (digitalRead(KEY_LAMP) == LOW)
    {
        nRet |= 0x0008;
    }
    return nRet & 0x000F;
}


잘 쓰고 있는 소스네요.

눌림시 키 처리
누르고 있으면 롱키 처리
계속 누르고 있으면 빠르게 롱키 반응
채터링 적용
10mS마다 키 스캔
